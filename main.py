import telebot
import pyshorteners
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = '7899524124:AAGsRUGspciuweZ4VLcFdn1IpmdKqPTULp4'  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

user_links = {}

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "üñê–ü—Ä–∏–≤–µ—Ç!‚õìÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è.")

@bot.message_handler(func=lambda message: True)
def get_link(message):
    url = message.text.strip()
    if url.startswith("http://") or url.startswith("https://"):
        user_links[message.chat.id] = url

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üåê TinyURL", callback_data="shorten_tinyurl"),
            InlineKeyboardButton("üß© is.gd", callback_data="shorten_isgd"),
            InlineKeyboardButton("‚ö° da.gd", callback_data="shorten_dagd")
        )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://).")

@bot.callback_query_handler(func=lambda call: call.data.startswith("shorten_"))
def callback_shorten(call):
    service = call.data.split("_")[1]
    chat_id = call.message.chat.id
    url = user_links.get(chat_id)
    if not url:
        bot.answer_callback_query(call.id, "–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å –µ—ë —Å–Ω–æ–≤–∞.")
        return

    try:
        shortener = pyshorteners.Shortener()
        if service == "tinyurl":
            short_url = shortener.tinyurl.short(url)
        elif service == "isgd":
            short_url = shortener.isgd.short(url)
        elif service == "dagd":
            short_url = shortener.dagd.short(url)
        else:
            bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å.")
            return

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=short_url),
            InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_{short_url}")
        )
        bot.send_message(chat_id, f"‚úÖ –°–æ–∫—Ä–∞—â–µ–Ω–æ —á–µ—Ä–µ–∑ {service}:\n{short_url}", reply_markup=markup)
        bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ!")

    except Exception:
        bot.send_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å.")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("copy_"))
def copy_link(call):
    short_url = call.data.replace("copy_", "")
    bot.send_message(call.message.chat.id, f"üìã –°–∫–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É:\n{short_url}")
    bot.answer_callback_query(call.id, "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ üëç (–Ω—É –ø–æ—á—Ç–∏)")

bot.polling()